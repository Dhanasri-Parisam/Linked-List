Array
Deletion at Beginning:
/*====================================================================================================*/

##include <iostream>
#include <vector>

void deleteAtBeginning(std::vector<int>& arr) {
    if (!arr.empty()) {
        arr.erase(arr.begin());
    }
}

void printArray(const std::vector<int>& arr) {
    for (int val : arr) {
        std::cout << val << " ";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> arr = {10, 20, 30};

    deleteAtBeginning(arr);

    printArray(arr);  // Output: 20 30

    return 0;
}


Singly Linked List (SLL)
Deletion at Beginning:
/*===============================================================================*/
#include <iostream>

struct Node {
    int data;
    Node* next;
};

void deleteAtBeginning(Node*& head) {
    if (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }
}

void printList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

int main() {
    Node* head = new Node{10, nullptr};
    head->next = new Node{20, nullptr};
    head->next->next = new Node{30, nullptr};

    deleteAtBeginning(head);

    printList(head);  // Output: 20 30

    return 0;
}


