Deletion at a Certain Position Array:
/*=============================================================================*/

#include <iostream>
using namespace std;

void deleteAtPosition(int arr[], int& size, int pos) {
    if (pos < 0 || pos >= size) {
        cout << "Invalid position!" << endl;
        return;
    }

    // Shift elements to the left
    for (int i = pos; i < size - 1; i++) {
        arr[i] = arr[i + 1];
    }

    // Decrease the size of the array
    size--;
}

int main() {
    int arr[] = {10, 20, 30, 40, 50};
    int size = 5;

    cout << "Original array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Delete element at position 2 (30 will be removed)
    deleteAtPosition(arr, size, 2);

    cout << "Array after deletion: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}



Deletion at a Certain Position SLL:
/*=============================================================================*/
void delete_pos(node*& head, int val) {
    if (head == nullptr) {
        cout << "LL is empty!" << endl;
        return;
    }

    if (val <= 0) {
        cout << "Invalid position!" << endl;
        return;
    }

    if (val == 1) {
        node* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    node* prev = nullptr;
    node* curr = head;
    
    // Traverse to the node just before the position to delete
    for (int i = 1; i < val && curr != nullptr; ++i) {
        prev = curr;
        curr = curr->next;
    }

    if (curr == nullptr) {
        cout << "Position out of bounds!" << endl;
        return;
    }

    prev->next = curr->next;
    delete curr;
}


    printList(head);  // Output: 10 30

    return 0;
}
