Deletion at a Certain Position Array:
/*=============================================================================*/

#include <iostream>
using namespace std;

void deleteAtPosition(int arr[], int& size, int pos) {
    if (pos < 0 || pos >= size) {
        cout << "Invalid position!" << endl;
        return;
    }

    // Shift elements to the left
    for (int i = pos; i < size - 1; i++) {
        arr[i] = arr[i + 1];
    }

    // Decrease the size of the array
    size--;
}

int main() {
    int arr[] = {10, 20, 30, 40, 50};
    int size = 5;

    cout << "Original array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Delete element at position 2 (30 will be removed)
    deleteAtPosition(arr, size, 2);

    cout << "Array after deletion: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}



Deletion at a Certain Position SLL:
/*=============================================================================*/
void deleteKth(node* head,int k){
    //edge case
    if(head==nullptr){
       cout<<"empty list";
    }
    else if(k==1){
        node* temp=head;
        while(temp->next!=nullptr){
            free(head);
            head=nullptr;
            temp=temp->next;
        }
    }
    else{
        int cnt=0;
        node* ptr=head;
        node* prev=nullptr;
        while(ptr->next!=nullptr){
            cnt++;
            if(cnt==k){
                ptr->next=ptr->next->next;
                free(ptr);
                break;
            }
            prev=ptr; //the game starts here
            ptr=ptr->next;
        }
    }
}
