Deletion at a Certain Position Array:
/*=============================================================================*/

#include <iostream>
using namespace std;

void deleteAtPosition(int arr[], int& size, int pos) {
    if (pos < 0 || pos >= size) {
        cout << "Invalid position!" << endl;
        return;
    }

    // Shift elements to the left
    for (int i = pos; i < size - 1; i++) {
        arr[i] = arr[i + 1];
    }

    // Decrease the size of the array
    size--;
}

int main() {
    int arr[] = {10, 20, 30, 40, 50};
    int size = 5;

    cout << "Original array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Delete element at position 2 (30 will be removed)
    deleteAtPosition(arr, size, 2);

    cout << "Array after deletion: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}



Deletion at a Certain Position SLL:
/*=============================================================================*/
#include <iostream>

struct Node {
    int data;
    Node* next;
};

void deleteAtPosition(Node*& head, int position) {
    if (head == nullptr || position < 0) return;

    if (position == 0) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    Node* current = head;
    for (int i = 0; current != nullptr && i < position - 1; ++i) {
        current = current->next;
    }

    if (current == nullptr || current->next == nullptr) return;

    Node* temp = current->next;
    current->next = current->next->next;
    delete temp;
}

void printList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

int main() {
    Node* head = new Node{10, nullptr};
    head->next = new Node{20, nullptr};
    head->next->next = new Node{30, nullptr};

    deleteAtPosition(head, 1);

    printList(head);  // Output: 10 30

    return 0;
}
