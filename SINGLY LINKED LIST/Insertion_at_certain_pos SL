#include <iostream>
using namespace std;

struct node {
    int data;
    struct node* next;
};

// Function to print the linked list
void print_data(struct node* head) {
    if (head == nullptr) {
        cout << "Linked list is empty" << endl;
        return;
    }
    struct node* ptr = head;
    while (ptr != nullptr) {
        cout << ptr->data << " -> ";
        ptr = ptr->next;
    }
    cout << "NULL" << endl;
}

// Function to insert a node at the beginning
void insertAtBeginning(node*& head, int value) {
    node* newNode = new node(); // Create a new node
    newNode->data = value;     // Set the data
    newNode->next = head;      // Point to the current head
    head = newNode;            // Update head to the new node
}

// Function to count the nodes in the linked list
int count_of_ll(struct node* head) {
    int cnt = 0;
    struct node* ptr = head;
    while (ptr != nullptr) {
        cnt++;
        ptr = ptr->next;
    }
    return cnt;
}

// Function to insert a node at a specific position
void insert_pos(node*& head, int pos, int value) {
    int cnt = count_of_ll(head);

    if (pos <= 0 || pos > cnt + 1) {
        cout << "Position " << pos << " is out of bounds." << endl;
        return;
    }

    // Special case: Insert at the beginning
    node* ptr1 = head;
    node* ptr2 = new node({value, nullptr});
    pos--; 
    while (pos > 1 && ptr1->next != nullptr) {
        ptr1 = ptr1->next;
        pos--;
    }
    ptr2->next = ptr1->next;
    ptr1->next = ptr2;
}

int main() {
    // Creating the initial linked list
    node* head = nullptr;

    // Insert nodes at the beginning
    insertAtBeginning(head, 10);
    insertAtBeginning(head, 20);
    insertAtBeginning(head, 30);

    cout << "Before insertion:" << endl;
    print_data(head);

    // Insert a new node at the beginning
    insertAtBeginning(head, 40);
    cout << "After insertion at the beginning:" << endl;
    print_data(head);

    // Insert at a specific position
    insert_pos(head, 2, 15); // Insert value 15 at position 2
    cout << "After insertion at position 2:" << endl;
    print_data(head);

    // Invalid insertions
    insert_pos(head, -2, 15);
    insert_pos(head, 10, 15);
    insert_pos(head, 6, 50);

    // Final state of the linked list
    print_data(head);

    return 0;
}
