#include <iostream>
using namespace std;

struct node {
    int data = 10;
    node* next = nullptr;
};

void display(node* nn1) {
    node* ptr = nn1;
    while (ptr != nullptr) {
        cout << ptr->data << " -> ";
        ptr = ptr->next;
    }
    cout << "NULL\n";
}

int cnt_nodes(node* nn1) {
    int cnt = 0;
    node* ptr = nn1;
    while (ptr != nullptr) {
        cnt++;
        ptr = ptr->next;
    }
    return cnt;
}

void insert_pos(node*& head, int pos) {
    if (pos <= 0) {
        cout << "Invalid position "<<pos<<" to insert!\n";
        return;
    }

    int cnt = cnt_nodes(head);
    if (pos > cnt + 1) {
        cout << "Invalid position " << pos <<" to insert!"<<"\n";
        return;
    }

    node* newnode = new node({20, nullptr});

    // Special case: Insert at the head
    if (pos == 1) {
        newnode->next = head;
        head = newnode;
        return;
    }

    // Insert at a position other than the head
    node* ptr = head;
    for (int i = 1; i < pos - 1; i++) {
        ptr = ptr->next;
    }
    newnode->next = ptr->next;
    ptr->next = newnode;
}

int main() {
    node* nn1 = new node();
    node* nn2 = new node({30, nullptr});
    nn1->next = nn2;
    node* nn3 = new node({40, nullptr});
    nn2->next = nn3;

    cout << "Before insertion:\n";
    display(nn1);

    // Insert at position 2
    insert_pos(nn1, 2);
    cout << "After insertion at position 2:\n";
    display(nn1);

    // Insert at position 4 (at the end)
    insert_pos(nn1, 4);
    cout << "After insertion at position 4:\n";
    display(nn1);

    // Insert at position 1 (at the head)
    insert_pos(nn1, 1);
    cout << "After insertion at position 1:\n";
    display(nn1);
    
    insert_pos(nn1, 10);
    display(nn1);
    cnt_nodes(nn1);
    
    insert_pos(nn1, -10);
    display(nn1);
    return 0;
}
