Inserting at a Specific Position in an Array (C++):
------------------------------------------------------------------------------------- 

#include <iostream>
#include <vector>

void insertAtPosition(std::vector<int>& arr, int value, int position) {
    if (position < 0 || position > arr.size()) {
        std::cout << "Position out of bounds" << std::endl;
        return;
    }
    arr.insert(arr.begin() + position, value);
}

void printArray(const std::vector<int>& arr) {
    for (int val : arr) {
        std::cout << val << " ";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<int> arr = {10, 20, 30};

    insertAtPosition(arr, 15, 1);
    insertAtPosition(arr, 25, 3);
    insertAtPosition(arr, 5, 0);
    insertAtPosition(arr, 50, 10);  // Position out of bounds

    printArray(arr);  // Output: 5 10 15 20 25 30

    return 0;
}

Inserting at a Specific Position in an SL (C++):
---------------------------------------------------------------------------------------------------------------------------

#include <iostream>

struct Node {
    int data;
    Node* next;
};

void insertAtPosition(Node*& head, int value, int position) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = nullptr;

    if (position == 0) {
        newNode->next = head;
        head = newNode;
        return;
    }

    Node* temp = head;
    for (int i = 0; i < position - 1 && temp != nullptr; ++i) {
        temp = temp->next;
    }

    if (temp == nullptr) {
        std::cout << "Position out of bounds" << std::endl;
    } else {
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

void printList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

int main() {
    Node* head = nullptr;

    insertAtPosition(head, 10, 0);
    insertAtPosition(head, 20, 1);
    insertAtPosition(head, 30, 1);
    insertAtPosition(head, 40, 10);  // Position out of bounds

    printList(head);  // Output: 10 30 20

    return 0;
}
